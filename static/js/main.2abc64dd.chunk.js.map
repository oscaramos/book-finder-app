{"version":3,"sources":["components/books-api/BooksApi.js","components/car/card.jsx","App.js","serviceWorker.js","index.js"],"names":["searchBook","title","Promise","resolve","reject","books","search","error","results","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","image","width","height","img","display","maxHeight","Card","data","src","name","author","publisher","publishedDate","link","classes","className","Paper","Grid","container","item","ButtonBase","href","alt","xs","sm","direction","Typography","gutterBottom","variant","color","App","useState","setTitle","setBooks","loaded","setLoaded","useEffect","then","console","log","length","map","result","authors","thumbnail","Container","component","CssBaseline","TextField","id","label","value","onChange","e","target","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2abc64dd.chunk.js","sourcesContent":["import books from \"google-books-search\";\r\n\r\nconst searchBook = title => {\r\n  if(title === \"\")\r\n    return Promise.resolve([]);\r\n  return new Promise((resolve, reject) => {\r\n    books.search(title, (error, results) => {\r\n      if (!error) {\r\n        resolve(results);\r\n      } else {\r\n        reject(error);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport default searchBook;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: 'auto',\r\n    maxWidth: 500,\r\n  },\r\n  image: {\r\n    width: 128,\r\n    height: 128,\r\n  },\r\n  img: {\r\n    margin: 'auto',\r\n    display: 'block',\r\n    maxWidth: '100%',\r\n    maxHeight: '100%',\r\n  },\r\n}));\r\n\r\nconst Card = ({ data }) => {\r\n  const { src, name, author, publisher, publishedDate, link } = data;\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            <ButtonBase className={classes.image}>\r\n              <a href={link}><img className={classes.img} alt=\"cover\" src={src} /></a>\r\n            </ButtonBase>\r\n          </Grid>\r\n          <Grid item xs={12} sm container>\r\n            <Grid item xs container direction=\"column\" spacing={2}>\r\n              <Grid item xs>\r\n                <Typography gutterBottom variant=\"subtitle1\">{name}</Typography>\r\n                <Typography variant=\"body2\" gutterBottom>{author}</Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{publisher}</Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{publishedDate}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React, { useEffect, useState } from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport searchBook from \"./components/books-api/BooksApi\";\nimport Card from \"./components/car/card\";\n\nconst App = () => {\n  const [title, setTitle] = useState('');\n  const [books, setBooks] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    searchBook(title).then((results) => {\n      console.log(results);\n      if(results.length > 0) {\n        const getBooks = () => results.map(result => {\n          const author = \"authors\" in result ? result.authors[0] : \"No author provided\";\n          return ({\n            src: result.thumbnail,\n            name: result.title,\n            author,\n            publisher: result.publisher,\n            publishedDate: results.publishedDate,\n            link: result.link\n          });\n        });\n        setBooks(getBooks());\n        setLoaded(true);\n      }\n    });\n  }, [title]);\n\n  const onChangeText = (e) => {\n    setTitle(e.target.value);\n    setLoaded(false);\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <TextField id=\"standard-basic\" label=\"title\" maxWidth=\"xs\" value={title} onChange={onChangeText}/>\n      {\n        title !== ''?\n          loaded?\n          books.map(data =>\n            <Card data={data} key={data.title}/>)\n          : <div>Loading...</div>\n        : <div/>\n      }\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}